// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	models "flight_booking_system/ticketService/models"

	mock "github.com/stretchr/testify/mock"
)

// TicketRepositoryI is an autogenerated mock type for the TicketRepositoryI type
type TicketRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: p
func (_m *TicketRepositoryI) Create(p *models.Ticket) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Ticket) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *TicketRepositoryI) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *TicketRepositoryI) Get(id int) (*models.Ticket, error) {
	ret := _m.Called(id)

	var r0 *models.Ticket
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Ticket, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Ticket); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Ticket)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *TicketRepositoryI) GetAll() ([]*models.Ticket, error) {
	ret := _m.Called()

	var r0 []*models.Ticket
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Ticket, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Ticket); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Ticket)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUserName provides a mock function with given fields: userName
func (_m *TicketRepositoryI) GetAllByUserName(userName string) ([]*models.Ticket, error) {
	ret := _m.Called(userName)

	var r0 []*models.Ticket
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Ticket, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Ticket); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Ticket)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: p
func (_m *TicketRepositoryI) Update(p *models.Ticket) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Ticket) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTicketRepositoryI creates a new instance of TicketRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTicketRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *TicketRepositoryI {
	mock := &TicketRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
